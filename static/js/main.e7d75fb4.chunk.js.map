{"version":3,"sources":["components/TodoList/TodoList.tsx","contexts/SelectUserIdContext.tsx","components/TodoItem/TodoItem.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["SelectOptions","SelectUserIdContext","React","createContext","selectedUserId","setSelectedUserId","TodoItem","memo","userId","completed","title","useContext","useState","checked","setChecked","className","cn","type","onChange","event","target","onClick","TodoList","todos","searchValue","setSearchValue","filteredTodos","setFilteredTodos","String","All","selectedValue","setSelectedValue","useEffect","filter","toLowerCase","includes","Completed","Active","value","placeholder","map","todo","id","request","url","fetch","then","response","json","CurrentUser","user","setUser","data","name","email","phone","App","setTodos","items","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7d75fb4.chunk.js","sourcesContent":["import React, {\n  memo, useState, useEffect,\n} from 'react';\nimport { TodoItem } from '../TodoItem';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[]\n};\n\nenum SelectOptions {\n  All = 'all',\n  Completed = 'completed',\n  Active = 'active',\n}\n\nexport const TodoList: React.FC<Props> = memo(({ todos }) => {\n  const [searchValue, setSearchValue] = useState('');\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>([]);\n  const [selectedValue, setSelectedValue] = useState(String(SelectOptions.All));\n\n  useEffect(() => {\n    const toFilter = () => (\n      todos.filter(({ title, completed }) => {\n        switch (selectedValue) {\n          case SelectOptions.All:\n            return title.toLowerCase().includes(searchValue.toLowerCase());\n          case SelectOptions.Completed:\n            return title.toLowerCase().includes(searchValue.toLowerCase()) && (\n              completed\n            );\n          case SelectOptions.Active:\n            return title.toLowerCase().includes(searchValue.toLowerCase()) && (\n              !completed\n            );\n          default:\n            return false;\n        }\n      })\n    );\n\n    setFilteredTodos(toFilter);\n  }, [todos, searchValue, selectedValue]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchValue(event.target.value);\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__control\">\n        <input\n          type=\"text\"\n          value={searchValue}\n          onChange={handleChange}\n          placeholder=\"Search Todo\"\n        />\n\n        <select\n          value={selectedValue}\n          onChange={(event) => setSelectedValue(event.target.value)}\n        >\n          <option value={SelectOptions.All}>\n            All\n          </option>\n          <option value={SelectOptions.Active}>\n            Active\n          </option>\n          <option value={SelectOptions.Completed}>\n            Completed\n          </option>\n        </select>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(todo => (\n            <TodoItem\n              key={todo.id}\n              userId={todo.userId}\n              title={todo.title}\n              completed={todo.completed}\n            />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n});\n","import React from 'react';\n\ntype SelectedUserId = {\n  selectedUserId: number,\n  setSelectedUserId: (id: number) => void,\n};\n\nexport const SelectUserIdContext = React.createContext<SelectedUserId>({\n  selectedUserId: 0,\n  setSelectedUserId: () => {},\n});\n","import {\n  FC, memo, useContext, useState,\n} from 'react';\n\nimport cn from 'classnames';\n\nimport { SelectUserIdContext } from '../../contexts/SelectUserIdContext';\n\ntype Props = Omit<Todo, 'id'>;\n\nexport const TodoItem: FC<Props> = memo(({\n  userId, completed, title,\n}) => {\n  const { selectedUserId, setSelectedUserId } = useContext(SelectUserIdContext);\n  const [checked, setChecked] = useState(completed);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setChecked(event.target.checked);\n  };\n\n  return (\n    <li className={cn('TodoList__item', {\n      'TodoList__item--unchecked': !checked,\n      'TodoList__item--checked': checked,\n    })}\n    >\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={checked}\n          onChange={handleChange}\n        />\n        <p>{title}</p>\n      </label>\n\n      <button\n        className={cn('TodoList__user-button', 'button', {\n          'TodoList__user-button--selected': selectedUserId === userId,\n        })}\n        type=\"button\"\n        onClick={() => {\n          setSelectedUserId(userId);\n        }}\n      >\n        {`User #${userId}`}\n      </button>\n    </li>\n  );\n});\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction request(url: string) {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => response.json());\n}\n\nexport function getTodos(): Promise<Todo[]> {\n  return request('/todos');\n}\n\nexport function getCurrentUser(userId: number): Promise<User> {\n  return request(`/users/${userId}/`);\n}\n","import React, {\n  memo, useContext, useEffect, useState,\n} from 'react';\nimport { getCurrentUser } from '../../api/api';\nimport './CurrentUser.scss';\nimport { SelectUserIdContext } from '../../contexts/SelectUserIdContext';\n\nexport const CurrentUser: React.FC = memo(() => {\n  const [user, setUser] = useState<User | null>(null);\n  const { selectedUserId, setSelectedUserId } = useContext(SelectUserIdContext);\n\n  useEffect(() => {\n    getCurrentUser(selectedUserId)\n      .then(data => setUser(data));\n  }, [selectedUserId]);\n\n  return user && (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          {`Selected user: ${selectedUserId}`}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n      <button\n        className=\"CurrentUser__clear button\"\n        type=\"button\"\n        onClick={() => setSelectedUserId(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n});\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { SelectUserIdContext } from './contexts/SelectUserIdContext';\nimport { getTodos } from './api/api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId, setSelectedUserId,\n  ] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getTodos()\n      .then(items => setTodos(items));\n  }, []);\n\n  return (\n    <SelectUserIdContext.Provider value={{ selectedUserId, setSelectedUserId }}>\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList todos={todos} />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    </SelectUserIdContext.Provider>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}